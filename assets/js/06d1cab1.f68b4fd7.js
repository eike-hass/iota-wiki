"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[88672],{23503:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var i=t(87462),a=t(63366),r=(t(67294),t(3905)),l=["components"],o={},s="Examples",c={unversionedId:"is-cli/is_cli_examples",id:"is-cli/is_cli_examples",title:"Examples",description:"In this example we will show how to create Identities, Channels and how to subscribe to a channel, authorize a Subscriber and write data into a Channel.",source:"@site/content/build/integration-services/production/documentation/docs/is-cli/is_cli_examples.md",sourceDirName:"is-cli",slug:"/is-cli/is_cli_examples",permalink:"/integration-services/is-cli/is_cli_examples",draft:!1,editUrl:"https://github.com/iotaledger/integration-services/edit/develop/documentation/content/build/integration-services/production/documentation/docs/is-cli/is_cli_examples.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"CLI for Integration Services",permalink:"/integration-services/is-cli/introduction"},next:{title:"Overview",permalink:"/integration-services/getting_started/overview"}},p={},u=[{value:"Create json files",id:"create-json-files",level:3},{value:"Create the Identities",id:"create-the-identities",level:3},{value:"Create a Channel",id:"create-a-channel",level:3},{value:"Write to Channel",id:"write-to-channel",level:3},{value:"Request Subscription",id:"request-subscription",level:3},{value:"Authorize Subscription",id:"authorize-subscription",level:3},{value:"Write Message as a Subscriber",id:"write-message-as-a-subscriber",level:3},{value:"Read Channel",id:"read-channel",level:3},{value:"Read History of Channel",id:"read-history-of-channel",level:3},{value:"Revoke Subscription",id:"revoke-subscription",level:3},{value:"Find Subscription",id:"find-subscription",level:3},{value:"Help",id:"help",level:3}],d={toc:u};function h(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("p",null,"In this example we will show how to create Identities, Channels and how to subscribe to a channel, authorize a Subscriber and write data into a Channel."),(0,r.kt)("h3",{id:"create-json-files"},"Create json files"),(0,r.kt)("p",null,"First create two files ",(0,r.kt)("inlineCode",{parentName:"p"},"identityA.json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"identitiyB.json")," for creating these Identities with the CLI in the next step. Rename the ",(0,r.kt)("inlineCode",{parentName:"p"},"username")," field in ",(0,r.kt)("inlineCode",{parentName:"p"},"identityB.json")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"actorB"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "username": "actorA",\n    "claimType": "User",\n    "claim": {\n        "name": "John",\n        "surname": "Smith"\n    }\n}\n')),(0,r.kt)("h3",{id:"create-the-identities"},"Create the Identities"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is create-identity -i examples/identityA.json -o identityA.json \n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is create-identity -i examples/identityB.json -o identityB.json \n")),(0,r.kt)("h3",{id:"create-a-channel"},"Create a Channel"),(0,r.kt)("p",null,"Next we will create a private Channel with a topic ",(0,r.kt)("inlineCode",{parentName:"p"},"logs")," and the source ",(0,r.kt)("inlineCode",{parentName:"p"},"device")," and save the created Channel in a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"channelA.json"),". For public Channels add the option ",(0,r.kt)("inlineCode",{parentName:"p"},"-pC"),". For public Channels a subscriber is automatically authorized to the Channel but can't write into it. The user can read the history of this channel with the command ",(0,r.kt)("inlineCode",{parentName:"p"},"is read-channel-history"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is create-channel -i identityA.json -t logs -s device -o channelA.json test-channel\n")),(0,r.kt)("h3",{id:"write-to-channel"},"Write to Channel"),(0,r.kt)("p",null,"The creator of the Channel can directly write into it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'is write-channel -i identityA.json -p "hello world" -c channelA.json\n')),(0,r.kt)("h3",{id:"request-subscription"},"Request Subscription"),(0,r.kt)("p",null,"Other users need to subscribe to a Channel first."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is subscribe-channel -i identityB.json -c channelA.json\n")),(0,r.kt)("h3",{id:"authorize-subscription"},"Authorize Subscription"),(0,r.kt)("p",null,"The creator of the Channel authorizes a subscriber."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is authorize-subscription -i identityA.json -c channelA.json <Id of identityB>\n")),(0,r.kt)("h3",{id:"write-message-as-a-subscriber"},"Write Message as a Subscriber"),(0,r.kt)("p",null,"After the authorization the subscriber can write into the Channel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'is write-channel -i identityB.json -p "Can you hear me?" -c channelA.json\n')),(0,r.kt)("h3",{id:"read-channel"},"Read Channel"),(0,r.kt)("p",null,"The subscriber can read the Channel entries but only ones created after he/she was authorized to the Channel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is read-channel -i identityB.json -c channelA.json\n")),(0,r.kt)("h3",{id:"read-history-of-channel"},"Read History of Channel"),(0,r.kt)("p",null,"The user can also read the history of a Channel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is read-channel-history -i identityB.json -c channelA.json -sK <preshared key of channelA> \n")),(0,r.kt)("p",null,"Especially if the Channel is ",(0,r.kt)("inlineCode",{parentName:"p"},"public")," it is the only way for the subscriber to read from the Channel. For that add the option ",(0,r.kt)("inlineCode",{parentName:"p"},"-pC")," and remove the option for the preshared Key ",(0,r.kt)("inlineCode",{parentName:"p"},"-sK"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is read-channel-history -i identityB.json -c channelA.json -pC\n")),(0,r.kt)("h3",{id:"revoke-subscription"},"Revoke Subscription"),(0,r.kt)("p",null,"At any time the creator of a Channel can revoke the Subscription of other users."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is revoke-subscription -i identityA.json -c channelA.json -sI <Id of identityB>\n")),(0,r.kt)("h3",{id:"find-subscription"},"Find Subscription"),(0,r.kt)("p",null,"We can also double check if the Subscription is revoked by simply trying to find it. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is find-subscription -i identityA.json -c channelA.json -sI <Id of identityB> \n")),(0,r.kt)("h3",{id:"help"},"Help"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is help\n")),(0,r.kt)("p",null,"For one specific command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"is <command> --help\n")))}h.isMDXComponent=!0},3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return h}});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(t),h=a,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||r;return t?i.createElement(m,l(l({ref:n},p),{},{components:t})):i.createElement(m,l({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);