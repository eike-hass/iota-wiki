"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[91199],{77585:function(e){e.exports=JSON.parse('{"pluginId":"goshimmer","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Welcome","href":"/goshimmer/welcome","docId":"welcome"},{"type":"link","label":"FAQ","href":"/goshimmer/faq","docId":"faq"},{"type":"category","label":"Tutorials","items":[{"type":"link","label":"Set up a node","href":"/goshimmer/tutorials/setup","docId":"tutorials/setup"},{"type":"link","label":"Obtain tokens","href":"/goshimmer/tutorials/obtain_tokens","docId":"tutorials/obtain_tokens"},{"type":"link","label":"Wallet library","href":"/goshimmer/tutorials/wallet_library","docId":"tutorials/wallet_library"},{"type":"link","label":"Write a dApp","href":"/goshimmer/tutorials/dApp","docId":"tutorials/dApp"},{"type":"link","label":"Manual peering","href":"/goshimmer/tutorials/manual_peering","docId":"tutorials/manual_peering"},{"type":"link","label":"Create a static identity","href":"/goshimmer/tutorials/static_identity","docId":"tutorials/static_identity"},{"type":"link","label":"Set up the Monitoring Dashboard","href":"/goshimmer/tutorials/monitoring","docId":"tutorials/monitoring"},{"type":"link","label":"How to create and send transactions","href":"/goshimmer/tutorials/send_transaction","docId":"tutorials/send_transaction"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Implementation design","items":[{"type":"link","label":"Event driven model","href":"/goshimmer/implementation_design/event_driven_model","docId":"implementation_design/event_driven_model"},{"type":"link","label":"Packages and plugins","href":"/goshimmer/implementation_design/packages_plugins","docId":"implementation_design/packages_plugins"},{"type":"link","label":"Plugin","href":"/goshimmer/implementation_design/plugin","docId":"implementation_design/plugin"},{"type":"link","label":"Configuration parameters","href":"/goshimmer/implementation_design/configuration_parameters","docId":"implementation_design/configuration_parameters"},{"type":"link","label":"Object storage","href":"/goshimmer/implementation_design/object_storage","docId":"implementation_design/object_storage"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Protocol Specification","items":[{"type":"link","label":"Protocol Specification","href":"/goshimmer/protocol_specification/overview","docId":"protocol_specification/overview"},{"type":"link","label":"Protocol High Level Overview","href":"/goshimmer/protocol_specification/protocol","docId":"protocol_specification/protocol"},{"type":"category","label":"Components","items":[{"type":"link","label":"Overview","href":"/goshimmer/protocol_specification/components/overview","docId":"protocol_specification/components/overview"},{"type":"link","label":"Tangle","href":"/goshimmer/protocol_specification/components/tangle","docId":"protocol_specification/components/tangle"},{"type":"link","label":"Autopeering","href":"/goshimmer/protocol_specification/components/autopeering","docId":"protocol_specification/components/autopeering"},{"type":"link","label":"Mana","href":"/goshimmer/protocol_specification/components/mana","docId":"protocol_specification/components/mana"},{"type":"link","label":"Congestion Control","href":"/goshimmer/protocol_specification/components/congestion_control","docId":"protocol_specification/components/congestion_control"},{"type":"link","label":"Consensus Mechanism","href":"/goshimmer/protocol_specification/components/consensus_mechanism","docId":"protocol_specification/components/consensus_mechanism"},{"type":"link","label":"UTXO and Ledgerstate","href":"/goshimmer/protocol_specification/components/ledgerstate","docId":"protocol_specification/components/ledgerstate"},{"type":"link","label":"Advanced Outputs (Experimental)","href":"/goshimmer/protocol_specification/components/advanced_outputs","docId":"protocol_specification/components/advanced_outputs"},{"type":"link","label":"Markers","href":"/goshimmer/protocol_specification/components/markers","docId":"protocol_specification/components/markers"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Glossary","href":"/goshimmer/protocol_specification/glossary","docId":"protocol_specification/glossary"}],"collapsed":true,"collapsible":true},{"type":"category","label":"API","items":[{"type":"link","label":"Client Lib","href":"/goshimmer/apis/client_lib","docId":"apis/client_lib"},{"type":"link","label":"WebAPI","href":"/goshimmer/apis/webAPI","docId":"apis/webAPI"},{"type":"link","label":"Node Info","href":"/goshimmer/apis/info","docId":"apis/info"},{"type":"link","label":"Autopeering","href":"/goshimmer/apis/autopeering","docId":"apis/autopeering"},{"type":"link","label":"Manual Peering","href":"/goshimmer/apis/manual_peering","docId":"apis/manual_peering"},{"type":"link","label":"Communication Layer","href":"/goshimmer/apis/communication","docId":"apis/communication"},{"type":"link","label":"Ledgerstate","href":"/goshimmer/apis/ledgerstate","docId":"apis/ledgerstate"},{"type":"link","label":"Mana","href":"/goshimmer/apis/mana","docId":"apis/mana"},{"type":"link","label":"Snapshot","href":"/goshimmer/apis/snapshot","docId":"apis/snapshot"},{"type":"link","label":"Faucet","href":"/goshimmer/apis/faucet","docId":"apis/faucet"},{"type":"link","label":"Spammer","href":"/goshimmer/apis/spammer","docId":"apis/spammer"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Tooling","items":[{"type":"link","label":"Overview","href":"/goshimmer/tooling/overview","docId":"tooling/overview"},{"type":"link","label":"Docker Private Network","href":"/goshimmer/tooling/docker_private_network","docId":"tooling/docker_private_network"},{"type":"link","label":"Integration Tests","href":"/goshimmer/tooling/integration_tests","docId":"tooling/integration_tests"},{"type":"link","label":"DAGs Visualizer","href":"/goshimmer/tooling/dags_visualizer","docId":"tooling/dags_visualizer"},{"type":"link","label":"Evil Spammer","href":"/goshimmer/tooling/evil_spammer","docId":"tooling/evil_spammer"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Team Resources","items":[{"type":"link","label":"How To Do a Release","href":"/goshimmer/teamresources/release","docId":"teamresources/release"},{"type":"link","label":"Code Guidelines","href":"/goshimmer/teamresources/guidelines","docId":"teamresources/guidelines"},{"type":"link","label":"Local Development","href":"/goshimmer/teamresources/local_development","docId":"teamresources/local_development"},{"type":"link","label":"Modify the Analysis Dashboard","href":"/goshimmer/teamresources/analysis_dashboard","docId":"teamresources/analysis_dashboard"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Release Notes","href":"https://github.com/iotaledger/goshimmer/releases"}]},"docs":{"apis/autopeering":{"id":"apis/autopeering","title":"Peering API Methods","description":"The peering API allows retrieving basic information about autopeering using the /autopeering/neighbors endpoint or the GetAutopeeringNeighbors() function in the client lib.","sidebar":"docs"},"apis/client_lib":{"id":"apis/client_lib","title":"Client Lib: Interaction With Layers","description":"GoShimmer ships with a client Go library which communicates with the HTTP API.","sidebar":"docs"},"apis/communication":{"id":"apis/communication","title":"Communication Layer APIs","description":"The communication layer represents the base Tangle layer where so called `Messages` are gossiped around. A `Message` contains payloads, and it is up to upper layers to interpret and derive functionality out of them.","sidebar":"docs"},"apis/faucet":{"id":"apis/faucet","title":"Faucet API Methods","description":"The Faucet endpoint allows requesting funds from the Faucet.","sidebar":"docs"},"apis/info":{"id":"apis/info","title":"Info API Methods","description":"Info API returns basic info about the node with the /info and /healthz endpoints and the info() function.","sidebar":"docs"},"apis/ledgerstate":{"id":"apis/ledgerstate","title":"Ledgerstate API Methods","description":"The ledgerstate API provides endpoints to retrieve address details, unspent outputs for an address, get branch details, and list child branches amongst others.","sidebar":"docs"},"apis/mana":{"id":"apis/mana","title":"Mana API Methods","description":"The mana APIs provide methods for people to retrieve the amount of access/consensus mana of nodes and outputs, as well as the event logs.","sidebar":"docs"},"apis/manual_peering":{"id":"apis/manual_peering","title":"Manual Peering API methods","description":"The manual peering APIs allows you to add, get and remove the list of known peers of the node.","sidebar":"docs"},"apis/snapshot":{"id":"apis/snapshot","title":"Snapshot API Methods","description":"The snapshot API allows retrieving current snapshot.","sidebar":"docs"},"apis/spammer":{"id":"apis/spammer","title":"Spammer API Methods","description":"The Spammer tool lets you add messages to the tangle when running GoShimmer.","sidebar":"docs"},"apis/webAPI":{"id":"apis/webAPI","title":"WebAPI - clientLib","description":"The web API interface allows access to functionality of the node software via exposed HTTP endpoints.","sidebar":"docs"},"faq":{"id":"faq","title":"FAQ","description":"Frequently Asked Questions. What is GoShimmer?,  What Kind of Confirmation Time Can I Expect?, Where Can I See the State of the GoShimmer testnet?,How Many Transactions Per Second(TPS) can GoShimmer Sustain?, How is Spamming Prevented?, What Happens if I Issue a Double Spend?, Who\'s the Target Audience for Operating a GoShimmer Node?","sidebar":"docs"},"implementation_design/configuration_parameters":{"id":"implementation_design/configuration_parameters","title":"Configuration Parameters","description":"You can pass configuration parameters in two ways when running GoShimmer, through a JSON configuration file or through command line arguments. Parameters are grouped into embedded objects containing parameters for a single plugin or functionality. There is no limit on how deep the configuration object may be embedded.","sidebar":"docs"},"implementation_design/event_driven_model":{"id":"implementation_design/event_driven_model","title":"Event Driven Model","description":"When an event is triggered, an event handler (or a collection of handlers) is executed and the state of the application is updated as necessary. In GoShimmer some of those events can be the arrival of new tangle message, peering request or plugin start.","sidebar":"docs"},"implementation_design/object_storage":{"id":"implementation_design/object_storage","title":"Object Storage","description":"ObjectStorage is used as a base data structure for many data collection elements such as `branchStorage`, `conflictStorage`, `messageStorage` amongst others.","sidebar":"docs"},"implementation_design/packages_plugins":{"id":"implementation_design/packages_plugins","title":"Dependency of Packages and Plugins","description":"GoShimmer uses the adapter design pattern to easily switch between different implementations and internal interfaces just by using a different plugin, without having to rewrite the code using it.","sidebar":"docs"},"implementation_design/plugin":{"id":"implementation_design/plugin","title":"Plugin System","description":"The Plugin system allows to quickly and easily add and remove modules that need to be started. In GoShimmer, this is taken to an extreme, everything is run through plugins.","sidebar":"docs"},"protocol_specification/components/advanced_outputs":{"id":"protocol_specification/components/advanced_outputs","title":"UTXO Output Types","description":"IOTA strives to provide output types beyond the basic functionality of a cryptocurrency application such as Smart Contracts.","sidebar":"docs"},"protocol_specification/components/autopeering":{"id":"protocol_specification/components/autopeering","title":"Autopeering","description":"An IOTA node needs to discover and maintain a list of the reachable IP addresses of other peers. Nodes need to be kept up-to-date about the ledger state, thus they exchange information with each other.","sidebar":"docs"},"protocol_specification/components/congestion_control":{"id":"protocol_specification/components/congestion_control","title":"Congestion Control","description":"Every network has to deal with its intrinsic limited resources. GoShimmer uses congestion control algorithm to regulate the influx of messages in the network with the goal of maximizing throughput (messages/bytes per second) and minimizing delays.","sidebar":"docs"},"protocol_specification/components/consensus_mechanism":{"id":"protocol_specification/components/consensus_mechanism","title":"Consensus Mechanism","description":"The consensus mechanism is necessary to achieve agreement among the nodes of the network.  Since the Tangle is only partially ordered we have designed an open and leaderless consensus mechanism which combines FPC and Approval Weight.","sidebar":"docs"},"protocol_specification/components/ledgerstate":{"id":"protocol_specification/components/ledgerstate","title":"ledgerstate","description":"The unspent transaction output (UTXO) model defines a ledger state where balances are not directly associated with addresses but with the outputs of transactions. Transactions specify the outputs of previous transactions as inputs, which are consumed in order to create new outputs.","sidebar":"docs"},"protocol_specification/components/mana":{"id":"protocol_specification/components/mana","title":"Mana Implementation","description":"Mana is a reputation system for nodes within the IOTA network. Reputation is gained by contributing to the network. As time passes, part of the earned mana of a node decays to encourage keeping up the good behavior.","sidebar":"docs"},"protocol_specification/components/markers":{"id":"protocol_specification/components/markers","title":"Markers","description":"Markers is a tool to efficiently estimate the approval weight of a message and that reduces the portion of the Tangle that needs to be traversed, and which finally results in the grade of finality.","sidebar":"docs"},"protocol_specification/components/overview":{"id":"protocol_specification/components/overview","title":"Components of the Protocol","description":"High-level description of the interaction between components of the currently implemented GoShimmer protocol. The protocol can be divided into three main elements. A P2P overlay network, an immutable data structure, and a consensus mechanism.","sidebar":"docs"},"protocol_specification/components/tangle":{"id":"protocol_specification/components/tangle","title":"Tangle","description":"The Tangle represents a growing partially-ordered set of messages, linked with each other through cryptographic primitives, and replicated to all nodes in the peer-to-peer network. It enables the ledger state (i.e., the UTXO-DAG formed by transactions contained in messages), and the possibility to store data.","sidebar":"docs"},"protocol_specification/glossary":{"id":"protocol_specification/glossary","title":"Glossary","description":"Protocol specification glossary.","sidebar":"docs"},"protocol_specification/overview":{"id":"protocol_specification/overview","title":"Protocol specification","description":"High-level overview of the protocol, and its implemented components.","sidebar":"docs"},"protocol_specification/protocol":{"id":"protocol_specification/protocol","title":"Protocol High-level Overview","description":"A high-level overview of the protocol, following the natural life cycle of a message from the Tip Selection module to being considered valid permanently by all nodes.","sidebar":"docs"},"teamresources/analysis_dashboard":{"id":"teamresources/analysis_dashboard","title":"GoShimmer Analysis Dashboard","description":"How to use the Dashboard in dev mode and set up hot loading and packaging.","sidebar":"docs"},"teamresources/guidelines":{"id":"teamresources/guidelines","title":"Code Guidelines","description":"Code guidelines on how to contribute to the GoShimmer project.","sidebar":"docs"},"teamresources/local_development":{"id":"teamresources/local_development","title":"golangci-lint","description":"How to run and use golangci-lint to lint your code. How to build an image with the buildkit docker engine.","sidebar":"docs"},"teamresources/release":{"id":"teamresources/release","title":"How to Do a Release","description":"How to create a GoShimmer release.","sidebar":"docs"},"tooling/dags_visualizer":{"id":"tooling/dags_visualizer","title":"GoShimmer DAGs visualizer","description":"The DAGs visualizer is our all round tool for visualizing DAGs. Be it Tangle, UTXO-DAG or Branch-DAG or their interactions. The DAGs visualizer is our go-to tool for visualization.","sidebar":"docs"},"tooling/docker_private_network":{"id":"tooling/docker_private_network","title":"Docker Private Network","description":"GoShimmer provides a tool at `tools/docker-network` with which a local test network can be set up locally with docker.","sidebar":"docs"},"tooling/evil_spammer":{"id":"tooling/evil_spammer","title":"Evil spammer","description":"Evil spammer is the cli tool placed in tools/evil-spammer that allows to easily spam and stress test the network. It utilises client libraries evilwallet and evilspammer. Many predefined conflict and non-conflict scenarios are available to use directly with the evilwallet package, by command lines arguments of Evil Spammer tool, and by its interactive mode.","sidebar":"docs"},"tooling/integration_tests":{"id":"tooling/integration_tests","title":"Integration Tests with Docker","description":"Running the integration tests spins up a `tester` container within which every test can specify its own GoShimmer network with Docker.","sidebar":"docs"},"tooling/overview":{"id":"tooling/overview","title":"Tooling","description":"GoShimmer comes with a docker private network, integration tests and a CLI wallet to test the stability of the protocol.","sidebar":"docs"},"tutorials/dApp":{"id":"tutorials/dApp","title":"How to Create dApps","description":"Learn how to write simple dApps as GoShimmer plugins such as a chat dApp and a network delay dApp.","sidebar":"docs"},"tutorials/manual_peering":{"id":"tutorials/manual_peering","title":"Manual Peering","description":"Manual peering enables node operators to exchange their nodes\' information and let them peer with each other, orthogonal to autopeering.","sidebar":"docs"},"tutorials/monitoring":{"id":"tutorials/monitoring","title":"Setting up Monitoring Dashboard","description":"Node operators who wish to have more insights into what is happening within their node have the option to enable a Prometheus exporter plugin that gathers important metrics about their node. To visualize these metrics, a Grafana Dashboard is utilized.","sidebar":"docs"},"tutorials/obtain_tokens":{"id":"tutorials/obtain_tokens","title":"How to Obtain Tokens From the Faucet","description":"You can obtain tokens using the Faucet dApp, using the Go Client Library, the HTTP API and the Pollen Wallet","sidebar":"docs"},"tutorials/send_transaction":{"id":"tutorials/send_transaction","title":"How to Send a Transaction","description":"The simplest easiest way to create a transaction is to use ready solutions, such as GUI wallets. But you can also create transactions using the Go client library.","sidebar":"docs"},"tutorials/setup":{"id":"tutorials/setup","title":"Setting up a GoShimmer node","description":"How to set up your own GoShimmer node in the GoShimmer testnet with Docker","sidebar":"docs"},"tutorials/static_identity":{"id":"tutorials/static_identity","title":"Create a Static Identity","description":"Create a static GoShimmer identity using a random 32byte autopeering seed, open ssl or rand-seed.","sidebar":"docs"},"tutorials/wallet_library":{"id":"tutorials/wallet_library","title":"Command Line Wallet","description":"The main features in the wallet are requesting tokens from the faucet, sending tokens or assets to addresses, creating digital assets, creating-, transferring- or destroying NFTs, managing NFT owned tokens or assets and delegating tokens or digital assets","sidebar":"docs"},"welcome":{"id":"welcome","title":"Welcome","description":"GoShimmer is a prototype node software exploring the implementation of IOTA 2.0. This wiki helps the reader to understand the basic concepts and ideas behind Coordicide, and how its modules are implemented in GoShimmer.","sidebar":"docs"}}}')}}]);